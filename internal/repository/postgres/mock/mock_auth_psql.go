// Code generated by MockGen. DO NOT EDIT.
// Source: auth_psql.go

// Package test_postgres is a generated GoMock package.
package test_postgres

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthPsqlFuncs is a mock of AuthPsqlFuncs interface.
type MockAuthPsqlFuncs struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPsqlFuncsMockRecorder
}

// MockAuthPsqlFuncsMockRecorder is the mock recorder for MockAuthPsqlFuncs.
type MockAuthPsqlFuncsMockRecorder struct {
	mock *MockAuthPsqlFuncs
}

// NewMockAuthPsqlFuncs creates a new mock instance.
func NewMockAuthPsqlFuncs(ctrl *gomock.Controller) *MockAuthPsqlFuncs {
	mock := &MockAuthPsqlFuncs{ctrl: ctrl}
	mock.recorder = &MockAuthPsqlFuncsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPsqlFuncs) EXPECT() *MockAuthPsqlFuncsMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockAuthPsqlFuncs) AddUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAuthPsqlFuncsMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAuthPsqlFuncs)(nil).AddUser), arg0, arg1)
}

// IsLoginExist mocks base method.
func (m *MockAuthPsqlFuncs) IsLoginExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoginExist indicates an expected call of IsLoginExist.
func (mr *MockAuthPsqlFuncsMockRecorder) IsLoginExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginExist", reflect.TypeOf((*MockAuthPsqlFuncs)(nil).IsLoginExist), arg0)
}

// LogIn mocks base method.
func (m *MockAuthPsqlFuncs) LogIn(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockAuthPsqlFuncsMockRecorder) LogIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockAuthPsqlFuncs)(nil).LogIn), arg0, arg1)
}
