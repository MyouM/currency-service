// Code generated by MockGen. DO NOT EDIT.
// Source: currency_grpc.pb.go

// Package test_grpc is a generated GoMock package.
package currpb

import (
	context "context"
	currpb "currency-service/internal/proto/currpb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCurrencyServiceClient is a mock of CurrencyServiceClient interface.
type MockCurrencyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceClientMockRecorder
}

// MockCurrencyServiceClientMockRecorder is the mock recorder for MockCurrencyServiceClient.
type MockCurrencyServiceClientMockRecorder struct {
	mock *MockCurrencyServiceClient
}

// NewMockCurrencyServiceClient creates a new mock instance.
func NewMockCurrencyServiceClient(ctrl *gomock.Controller) *MockCurrencyServiceClient {
	mock := &MockCurrencyServiceClient{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyServiceClient) EXPECT() *MockCurrencyServiceClientMockRecorder {
	return m.recorder
}

// GetIntervalCurrency mocks base method.
func (m *MockCurrencyServiceClient) GetIntervalCurrency(ctx context.Context, in *currpb.ClientIntervalRequest, opts ...grpc.CallOption) (*currpb.ClientIntervalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntervalCurrency", varargs...)
	ret0, _ := ret[0].(*currpb.ClientIntervalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntervalCurrency indicates an expected call of GetIntervalCurrency.
func (mr *MockCurrencyServiceClientMockRecorder) GetIntervalCurrency(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntervalCurrency", reflect.TypeOf((*MockCurrencyServiceClient)(nil).GetIntervalCurrency), varargs...)
}

// GetSpecificCurrency mocks base method.
func (m *MockCurrencyServiceClient) GetSpecificCurrency(ctx context.Context, in *currpb.ClientSpecRequest, opts ...grpc.CallOption) (*currpb.ClientSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpecificCurrency", varargs...)
	ret0, _ := ret[0].(*currpb.ClientSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificCurrency indicates an expected call of GetSpecificCurrency.
func (mr *MockCurrencyServiceClientMockRecorder) GetSpecificCurrency(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificCurrency", reflect.TypeOf((*MockCurrencyServiceClient)(nil).GetSpecificCurrency), varargs...)
}

// MockCurrencyServiceServer is a mock of CurrencyServiceServer interface.
type MockCurrencyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceServerMockRecorder
}

// MockCurrencyServiceServerMockRecorder is the mock recorder for MockCurrencyServiceServer.
type MockCurrencyServiceServerMockRecorder struct {
	mock *MockCurrencyServiceServer
}

// NewMockCurrencyServiceServer creates a new mock instance.
func NewMockCurrencyServiceServer(ctrl *gomock.Controller) *MockCurrencyServiceServer {
	mock := &MockCurrencyServiceServer{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyServiceServer) EXPECT() *MockCurrencyServiceServerMockRecorder {
	return m.recorder
}

// GetIntervalCurrency mocks base method.
func (m *MockCurrencyServiceServer) GetIntervalCurrency(arg0 context.Context, arg1 *currpb.ClientIntervalRequest) (*currpb.ClientIntervalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntervalCurrency", arg0, arg1)
	ret0, _ := ret[0].(*currpb.ClientIntervalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntervalCurrency indicates an expected call of GetIntervalCurrency.
func (mr *MockCurrencyServiceServerMockRecorder) GetIntervalCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntervalCurrency", reflect.TypeOf((*MockCurrencyServiceServer)(nil).GetIntervalCurrency), arg0, arg1)
}

// GetSpecificCurrency mocks base method.
func (m *MockCurrencyServiceServer) GetSpecificCurrency(arg0 context.Context, arg1 *currpb.ClientSpecRequest) (*currpb.ClientSpecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificCurrency", arg0, arg1)
	ret0, _ := ret[0].(*currpb.ClientSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificCurrency indicates an expected call of GetSpecificCurrency.
func (mr *MockCurrencyServiceServerMockRecorder) GetSpecificCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificCurrency", reflect.TypeOf((*MockCurrencyServiceServer)(nil).GetSpecificCurrency), arg0, arg1)
}

// mustEmbedUnimplementedCurrencyServiceServer mocks base method.
func (m *MockCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCurrencyServiceServer")
}

// mustEmbedUnimplementedCurrencyServiceServer indicates an expected call of mustEmbedUnimplementedCurrencyServiceServer.
func (mr *MockCurrencyServiceServerMockRecorder) mustEmbedUnimplementedCurrencyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCurrencyServiceServer", reflect.TypeOf((*MockCurrencyServiceServer)(nil).mustEmbedUnimplementedCurrencyServiceServer))
}

// MockUnsafeCurrencyServiceServer is a mock of UnsafeCurrencyServiceServer interface.
type MockUnsafeCurrencyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCurrencyServiceServerMockRecorder
}

// MockUnsafeCurrencyServiceServerMockRecorder is the mock recorder for MockUnsafeCurrencyServiceServer.
type MockUnsafeCurrencyServiceServerMockRecorder struct {
	mock *MockUnsafeCurrencyServiceServer
}

// NewMockUnsafeCurrencyServiceServer creates a new mock instance.
func NewMockUnsafeCurrencyServiceServer(ctrl *gomock.Controller) *MockUnsafeCurrencyServiceServer {
	mock := &MockUnsafeCurrencyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCurrencyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCurrencyServiceServer) EXPECT() *MockUnsafeCurrencyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCurrencyServiceServer mocks base method.
func (m *MockUnsafeCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCurrencyServiceServer")
}

// mustEmbedUnimplementedCurrencyServiceServer indicates an expected call of mustEmbedUnimplementedCurrencyServiceServer.
func (mr *MockUnsafeCurrencyServiceServerMockRecorder) mustEmbedUnimplementedCurrencyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCurrencyServiceServer", reflect.TypeOf((*MockUnsafeCurrencyServiceServer)(nil).mustEmbedUnimplementedCurrencyServiceServer))
}
