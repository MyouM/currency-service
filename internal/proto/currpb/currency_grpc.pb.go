// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: currency.proto

package currpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

//go:generate mockgen -source=currency_grpc.pb.go -destination=mock_currency_grpc_pb.go -package=test_grpc

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CurrencyService_GetSpecificCurrency_FullMethodName = "/currpb.CurrencyService/GetSpecificCurrency"
	CurrencyService_GetIntervalCurrency_FullMethodName = "/currpb.CurrencyService/GetIntervalCurrency"
)

// CurrencyServiceClient is the client API for CurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyServiceClient interface {
	GetSpecificCurrency(ctx context.Context, in *ClientSpecRequest, opts ...grpc.CallOption) (*ClientSpecResponse, error)
	GetIntervalCurrency(ctx context.Context, in *ClientIntervalRequest, opts ...grpc.CallOption) (*ClientIntervalResponse, error)
}

type currencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyServiceClient(cc grpc.ClientConnInterface) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) GetSpecificCurrency(ctx context.Context, in *ClientSpecRequest, opts ...grpc.CallOption) (*ClientSpecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientSpecResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetSpecificCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetIntervalCurrency(ctx context.Context, in *ClientIntervalRequest, opts ...grpc.CallOption) (*ClientIntervalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientIntervalResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetIntervalCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServiceServer is the server API for CurrencyService service.
// All implementations must embed UnimplementedCurrencyServiceServer
// for forward compatibility.
type CurrencyServiceServer interface {
	GetSpecificCurrency(context.Context, *ClientSpecRequest) (*ClientSpecResponse, error)
	GetIntervalCurrency(context.Context, *ClientIntervalRequest) (*ClientIntervalResponse, error)
	mustEmbedUnimplementedCurrencyServiceServer()
}

// UnimplementedCurrencyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCurrencyServiceServer struct{}

func (UnimplementedCurrencyServiceServer) GetSpecificCurrency(context.Context, *ClientSpecRequest) (*ClientSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) GetIntervalCurrency(context.Context, *ClientIntervalRequest) (*ClientIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntervalCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {}
func (UnimplementedCurrencyServiceServer) testEmbeddedByValue()                         {}

// UnsafeCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServiceServer will
// result in compilation errors.
type UnsafeCurrencyServiceServer interface {
	mustEmbedUnimplementedCurrencyServiceServer()
}

func RegisterCurrencyServiceServer(s grpc.ServiceRegistrar, srv CurrencyServiceServer) {
	// If the following call pancis, it indicates UnimplementedCurrencyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CurrencyService_ServiceDesc, srv)
}

func _CurrencyService_GetSpecificCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetSpecificCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetSpecificCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetSpecificCurrency(ctx, req.(*ClientSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetIntervalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetIntervalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetIntervalCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetIntervalCurrency(ctx, req.(*ClientIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyService_ServiceDesc is the grpc.ServiceDesc for CurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currpb.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpecificCurrency",
			Handler:    _CurrencyService_GetSpecificCurrency_Handler,
		},
		{
			MethodName: "GetIntervalCurrency",
			Handler:    _CurrencyService_GetIntervalCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency.proto",
}
