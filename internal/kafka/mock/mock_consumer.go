// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockConsumerFuncs is a mock of ConsumerFuncs interface.
type MockConsumerFuncs struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerFuncsMockRecorder
}

// MockConsumerFuncsMockRecorder is the mock recorder for MockConsumerFuncs.
type MockConsumerFuncsMockRecorder struct {
	mock *MockConsumerFuncs
}

// NewMockConsumerFuncs creates a new mock instance.
func NewMockConsumerFuncs(ctrl *gomock.Controller) *MockConsumerFuncs {
	mock := &MockConsumerFuncs{ctrl: ctrl}
	mock.recorder = &MockConsumerFuncsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerFuncs) EXPECT() *MockConsumerFuncsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumerFuncs) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerFuncsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumerFuncs)(nil).Close))
}

// Listen mocks base method.
func (m *MockConsumerFuncs) Listen(arg0 context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockConsumerFuncsMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockConsumerFuncs)(nil).Listen), arg0)
}
