// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducerFuncs is a mock of ProducerFuncs interface.
type MockProducerFuncs struct {
	ctrl     *gomock.Controller
	recorder *MockProducerFuncsMockRecorder
}

// MockProducerFuncsMockRecorder is the mock recorder for MockProducerFuncs.
type MockProducerFuncsMockRecorder struct {
	mock *MockProducerFuncs
}

// NewMockProducerFuncs creates a new mock instance.
func NewMockProducerFuncs(ctrl *gomock.Controller) *MockProducerFuncs {
	mock := &MockProducerFuncs{ctrl: ctrl}
	mock.recorder = &MockProducerFuncsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerFuncs) EXPECT() *MockProducerFuncsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducerFuncs) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerFuncsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducerFuncs)(nil).Close))
}

// Send mocks base method.
func (m *MockProducerFuncs) Send(arg0 context.Context, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerFuncsMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducerFuncs)(nil).Send), arg0, arg1, arg2)
}
