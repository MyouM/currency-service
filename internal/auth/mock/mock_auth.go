// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthFuncs is a mock of AuthFuncs interface.
type MockAuthFuncs struct {
	ctrl     *gomock.Controller
	recorder *MockAuthFuncsMockRecorder
}

// MockAuthFuncsMockRecorder is the mock recorder for MockAuthFuncs.
type MockAuthFuncsMockRecorder struct {
	mock *MockAuthFuncs
}

// NewMockAuthFuncs creates a new mock instance.
func NewMockAuthFuncs(ctrl *gomock.Controller) *MockAuthFuncs {
	mock := &MockAuthFuncs{ctrl: ctrl}
	mock.recorder = &MockAuthFuncsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthFuncs) EXPECT() *MockAuthFuncsMockRecorder {
	return m.recorder
}

// LoginCheck mocks base method.
func (m *MockAuthFuncs) LoginCheck() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginCheck")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginCheck indicates an expected call of LoginCheck.
func (mr *MockAuthFuncsMockRecorder) LoginCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginCheck", reflect.TypeOf((*MockAuthFuncs)(nil).LoginCheck))
}

// LoginService mocks base method.
func (m *MockAuthFuncs) LoginService(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginService indicates an expected call of LoginService.
func (mr *MockAuthFuncsMockRecorder) LoginService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginService", reflect.TypeOf((*MockAuthFuncs)(nil).LoginService), arg0, arg1)
}

// RegisterCheck mocks base method.
func (m *MockAuthFuncs) RegisterCheck() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCheck")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCheck indicates an expected call of RegisterCheck.
func (mr *MockAuthFuncsMockRecorder) RegisterCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCheck", reflect.TypeOf((*MockAuthFuncs)(nil).RegisterCheck))
}

// RegisterService mocks base method.
func (m *MockAuthFuncs) RegisterService(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockAuthFuncsMockRecorder) RegisterService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockAuthFuncs)(nil).RegisterService), arg0, arg1)
}
